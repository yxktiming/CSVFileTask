<?xml version="1.0" encoding="UTF-8"?>
<!-- monitorInterval属性，含义是每隔300秒重新读取配置文件，可以不重启应用的情况下修改配置 -->
<Configuration status="WARN" monitorInterval="300">
    <!-- <properties>定义了常量方便后面复用 -->
    <properties>
        <property name="LOG_HOME">C:/Tomcat/apache-tomcat-8.0.51/logs</property>
    </properties>
    <!-- Appender可以理解为日志的输出目的地，这里配置了一个类型为Console的Appender，也就是输出到控制台。
    Console节点中的PatternLayout定义了输出日志时的格式：
    %d{HH:mm:ss.SSS} 表示输出到毫秒的时间
    %t 输出当前线程名称
    %-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
    %logger 输出logger名称，因为Root Logger没有名称，所以没有输出
    %msg 日志文本
    %n 换行
    %F 输出所在的类文件名，如Client.java
    %L 输出行号
    %M 输出所在方法名
    %l 输出语句所在的行数, 包括类名、方法名、文件名、行数-->
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>

        <!-- Rolling的意思是当满足一定条件后，就重命名原日志文件用于备份，并从新生成一个新的日志文件。
        例如需求是每天生成一个日志文件，但是如果一天内的日志文件体积已经超过1G，就从新生成，两个条件满足一个即可。 -->
        <!-- fileName  指定当前日志文件的位置和文件名称
        filePattern  指定当发生Rolling时，文件的转移和重命名规则 -->
        <!-- 输出INFO及以上级别信息（onMatch），其他的不输出 -->
        <RollingRandomAccessFile name="ErrorFile"
                                 fileName="${LOG_HOME}/Error.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
                <PatternLayout pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%F:%L:%l] - %msg%n"/>
            </Filters>
            <PatternLayout pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%F:%L:%l] - %msg%n"/>
            <Policies>
                <!-- TimeBasedTriggeringPolicy  这个配置需要和filePattern结合使用，
                注意filePattern中配置的文件重命名规则是${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，
                最小的时间粒度是mm，即分钟，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1分钟生成一个新文件。
                如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件。 -->
                <TimeBasedTriggeringPolicy size="1"/>
                <!-- SizeBasedTriggeringPolicy  指定当文件体积大于size指定的值时，触发Rolling -->
                <SizeBasedTriggeringPolicy size="1 MB"/>
            </Policies>
        </RollingRandomAccessFile>
        <RollingRandomAccessFile name="InfoFile"
                                 fileName="${LOG_HOME}/info.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd HH}-%i.log">
            <Filters>
                <!-- 不输出warn及以上级别的信息（onMatch），其他的输出（onMismatch）-->
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%F:%L:%l] - %msg%n"/>
            <Policies>
                <!-- TimeBasedTriggeringPolicy  这个配置需要和filePattern结合使用，
                注意filePattern中配置的文件重命名规则是${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，
                最小的时间粒度是mm，即分钟，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1分钟生成一个新文件。
                如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件。 -->
                <TimeBasedTriggeringPolicy size="1"/>
                <!-- SizeBasedTriggeringPolicy  指定当文件体积大于size指定的值时，触发Rolling -->
                <SizeBasedTriggeringPolicy size="1 MB"/>
            </Policies>
        </RollingRandomAccessFile>
    </Appenders>
    <loggers>
        <Root level="Info">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="ErrorFile"/>
            <AppenderRef ref="InfoFile"/>
        </Root>
    </loggers>
</Configuration>